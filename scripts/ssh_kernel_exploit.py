#!/usr/bin/python2

from pwn import *

import gzip
import base64

'''
Utilities

- command(cmdstr)
  : Write 'cmdstr' to command prompt and get its output.

- upload_file(src_path, dest_path)
  : Upload file to remote server.
    'src_path' is file path which to upload.
    'dest_path' is file path which to be saved on remote.
'''

def command(cmdstr):
    ''' Send command & Take result of it.
    '''

    sh.sendline(cmdstr)
    sh.recvuntil("\n")
    return sh.recvuntil("/ $ ")[:-5]

def upload_file(src_path, dest_path, compress=True):
    ''' Upload file to host.
    '''

    upload_cache = "/tmp/.downloading"

    # Read file & Compress via gzip
    with open(src_path, 'rb') as f:
        file_data = f.read()

    if compress:
        orig_len = len(file_data)
        log.info("Before compress length: %d", orig_len)
        
        with gzip.open('/tmp/.softmmu_exploit', 'w') as f:
            f.write(file_data)
        with open('/tmp/.softmmu_exploit', 'rb') as f:
            file_data = f.read()
            file_len = len(file_data)

    orig_len = len(file_data)
    log.info("Before encode length: %d", orig_len)
    file_data = base64.b64encode(file_data)
    file_len = len(file_data)

    log.info("Current file data length: %d", file_len)

    # Upload
    p = log.progress("Sending file to remote server")

    ## Split into chunks
    chunk_size = 0x100
    chunks = [ file_data[i:i+chunk_size] for i in range(0, file_len, chunk_size) ]

    ## Send
    for i in range(len(chunks)-1):
        p.status("%d / %d", sum(map(len, chunks)[:i]), file_len)
        sh.sendline("cat << EOF >> {}".format(upload_cache))
        sh.sendline(chunks[i])
        sh.sendline("EOF")
        sh.recvuntil("\n/ $ ")

    i += 1
    p.status("%d / %d", sum(map(len, chunks)[:i]), file_len)
    sh.sendline("cat << EOF >> {}".format(upload_cache))
    sh.sendline(chunks[i])
    sh.sendline("EOF")
    sh.recvuntil("\n/ $ ")

    p.success("File sent.")

    ## Decoding & Decompressing
    p = log.progress("Decoding & Decompressing")
    command("base64 -d {} | zcat > {}".format(upload_cache, dest_path))
    p.success("Fully extracted.")

    # Check
    host_hash = command("md5sum {}".format(dest_path)).split(" ")[0]
    local_hash = md5filehex(src_path)
    if host_hash != local_hash:
        log.error("File sent error: [host=%s, local=%s]", host_hash, local_hash)

# ---------------------------------------------------------------------------- #

s = ssh(host="",
        user="",
        password="",
        port=2222,
        timeout=3)

# Open new ssh channel
sh = s.shell()
sh.recvuntil("/ $ ")

# Exploit
if __name__ == "__main__":
    log.info("Let's do this.")